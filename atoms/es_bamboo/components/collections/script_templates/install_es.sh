#!/bin/bash


anynowtime="date +'%Y-%m-%d %H:%M:%S'"
NOW="echo [\`$anynowtime\`][PID:$$]"

##### 可在脚本开始运行时调用，打印当时的时间戳及PID。
function job_start
{
    echo "`eval $NOW` job_start"
}

##### 可在脚本执行成功的逻辑分支处调用，打印当时的时间戳及PID。
function job_success
{
    MSG="$*"
    echo "`eval $NOW` job_success:[$MSG]"
    exit 0
}

##### 可在脚本执行失败的逻辑分支处调用，打印当时的时间戳及PID。
function job_fail
{
    MSG="$*"
    echo "`eval $NOW` job_fail:[$MSG]"
    exit 1
}

job_start


## 初始化
ESENV="/data/esenv"
##  暂时不考虑多个路径的情况
#ESDATA="/data/esdata"
ESLOG="/data/eslog"
user=elastic

adduser $user

echo -e "elastic soft memlock unlimited\nelastic hard memlock unlimited" >> /etc/security/limits.conf
echo -e "vm.max_map_count=262144\nvm.swappiness=1" >> /etc/sysctl.conf ;sysctl -p

path=`cat /etc/mtab |grep /data |grep -v overlay |awk '{print $2}'`
if [[ "x$path" == "x/data" ||  "x$path" == "x" ]];then
    mkdir -p /data/esdata && chown -R elastic:elastic /data/esdata
    ESDATA="/data/esdata"
else
    for i in $path;do
        mkdir $i/esdata  && chown -R elastic:elastic $i/esdata
        datapath=$i/esdata,$datapath
    done
    ESDATA=`echo $datapath|sed 's/,$//'`
fi

[[ ! -e "$ESENV" ]] && mkdir -p $ESENV  && chown  -R $user:$user $ESENV
[[ ! -e "$ESLOG" ]] && mkdir -p $ESLOG  && chown -R $user:$user $ESLOG

cat <<'EOF' > /data/esenv/esprofile
export JAVA_HOME=/data/esenv/java
export JRE=$JAVA_HOME/jre
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
export CLASSPATH=".:$JAVA_HOME/lib:$JRE/lib:$CLASSPATH"
export ES_HOME=/data/esenv/es
export ES_CONF_DIR=$ES_HOME/config
export PATH=$PATH:$ES_HOME/bin
export PATH=$PATH:$ES_HOME/sbin
export PATH=$PATH:${JAVA_HOME}/bin:${ES_HOME}/bin:${ES_HOME}/sbin
EOF

echo "export ESDATA=$ESDATA" >> /data/esenv/esprofile

chown elastic  /data/esenv/esprofile

sed -i '/esprofile/d' /etc/profile
echo "source /data/esenv/esprofile" >>/etc/profile
env

clustername=$1
masterip=$2
role=$3
port=$4
version=$5
username=$6
password=$7



user="elastic"
cerebroversion=0.9.4
minimasters=`echo $masterip |awk -F',' '{print NF}'`
nodeip=`ip a|grep eth1|grep inet |awk '{print $2}'| awk -F'/' '{print $1}'`
source /etc/profile
env
esconfig="/data/esenv/es/config/elasticsearch.yml.template"
jvmconfig="/data/esenv/es/config/jvm.options.template"
nodename="master-$nodeip"

mv /data/*.tar.gz /data/esenv
cd /data/esenv
# shellcheck disable=SC2015
tar zxf elasticsearch-"$version".tar.gz && ln -s elasticsearch-"$version" es  || job_fail "tar elasticsearch-$version.tar.gz failed"


if [[ "x$version" = "5.4.0" ]];then
cat <<'EOF' > $esconfig
cluster.name: __CLUSTERNAME__
node.name: __NODENAME__
http.port: __HTTPPORT__

node.data: true
node.master: true

path.data: [ __ESDATA__ ]
path.logs: /data/eslog


network.host: 127.0.0.1,__IP__

discovery.zen.minimum_master_nodes: __MINMASTERS__
discovery.zen.ping.unicast.hosts: [ __MASTERLIST__ ]


thread_pool.search.queue_size: 2000
thread_pool.bulk.queue_size: 2000
cluster.routing.allocation.same_shard.host: true
indices.memory.index_buffer_size : 10%
indices.recovery.max_bytes_per_sec: 200mb
cluster.routing.allocation.balance.index: 0.55
cluster.routing.allocation.balance.shard: 0.01
cluster.routing.allocation.node_initial_primaries_recoveries: 10
search.default_search_timeout: 120s


xpack.security.enabled: false
xpack.monitoring.enabled: true
xpack.graph.enabled: false
xpack.watcher.enabled: false


## Search Guard
searchguard.ssl.transport.pemcert_filepath: node1.pem
searchguard.ssl.transport.pemkey_filepath: node1.key
searchguard.ssl.transport.pemkey_password: aR9mBRUZ1Qh8
searchguard.ssl.transport.pemtrustedcas_filepath: root-ca.pem
searchguard.ssl.transport.enforce_hostname_verification: false
searchguard.ssl.transport.resolve_hostname: false
searchguard.ssl.http.enabled: false
searchguard.ssl.http.pemcert_filepath: node1_http.pem
searchguard.ssl.http.pemkey_filepath: node1_http.key
searchguard.ssl.http.pemkey_password: miJ2MVqKwEr8
searchguard.ssl.http.pemtrustedcas_filepath: root-ca.pem
searchguard.ssl.http.clientauth_mode: OPTIONAL
searchguard.nodes_dn:
- CN=node1.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com
- CN=node2.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com
- CN=node3.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com
searchguard.authcz.admin_dn:
- CN=kirk.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com

######## End Search Guard Configuration ########
EOF

cat <<'EOF' > $jvmconfig
# Generated by codes
-Xms__HEAPSIZE__
-Xmx__HEAPSIZE__

-XX:+UseConcMarkSweepGC
-XX:CMSInitiatingOccupancyFraction=75
-XX:+UseCMSInitiatingOccupancyOnly


-XX:+DisableExplicitGC
-XX:+AlwaysPreTouch


-server
-Xss1m

-Djava.awt.headless=true
-Dfile.encoding=UTF-8
-Djna.nosys=true
-Djdk.io.permissionsUseCanonicalPath=true
-Dio.netty.noUnsafe=true
-Dio.netty.noKeySetOptimization=true
-Dio.netty.recycler.maxCapacityPerThread=0

-Dlog4j.shutdownHookEnabled=false
-Dlog4j2.disable.jmx=true
-Dlog4j.skipJansi=true
EOF

else
  cat <<'EOF' > $jvmconfig
# Generated by codes
-Xms__HEAPSIZE__
-Xmx__HEAPSIZE__


8-9:-XX:+UseConcMarkSweepGC
8-9:-XX:CMSInitiatingOccupancyFraction=75
8-9:-XX:+UseCMSInitiatingOccupancyOnly

10-14:-XX:+UseG1GC
10-14:-XX:G1ReservePercent=25
10-14:-XX:InitiatingHeapOccupancyPercent=30

-Djava.io.tmpdir=${ES_TMPDIR}


-XX:+HeapDumpOnOutOfMemoryError

-XX:HeapDumpPath=data

-XX:ErrorFile=logs/hs_err_pid%p.log

8:-XX:+PrintGCDetails
8:-XX:+PrintGCDateStamps
8:-XX:+PrintTenuringDistribution
8:-XX:+PrintGCApplicationStoppedTime
8:-Xloggc:logs/gc.log
8:-XX:+UseGCLogFileRotation
8:-XX:NumberOfGCLogFiles=32
8:-XX:GCLogFileSize=64m

9-:-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m

-Dclk.tck=100
-Djdk.attach.allowAttachSelf=true
EOF

  cat <<'EOF' > $esconfig
cluster.name: __CLUSTERNAME__
node.name: __NODENAME__
http.port: __HTTPPORT__

node.data: true
node.master: true

path.data: [ __ESDATA__ ]
path.logs: /data/eslog

network.host: 127.0.0.1,__IP__

thread_pool.search.queue_size: 2000
thread_pool.write.queue_size: 2000
cluster.routing.allocation.same_shard.host: true
indices.memory.index_buffer_size : 10%
indices.recovery.max_bytes_per_sec: 200mb
cluster.routing.allocation.balance.index: 0.55
cluster.routing.allocation.balance.shard: 0.01
cluster.routing.allocation.node_initial_primaries_recoveries: 10
search.default_search_timeout: 120s
discovery.seed_hosts: [ __MASTERLIST__ ]
cluster.initial_master_nodes: [ __MASTERLIST__ ]


opendistro_security.ssl.transport.pemcert_filepath: node1.pem
opendistro_security.ssl.transport.pemkey_filepath: node1.key
opendistro_security.ssl.transport.pemkey_password: aR9mBRUZ1Qh8
opendistro_security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
opendistro_security.ssl.transport.enforce_hostname_verification: false
opendistro_security.ssl.transport.resolve_hostname: false
opendistro_security.ssl.http.enabled: false
opendistro_security.ssl.http.pemcert_filepath: node1_http.pem
opendistro_security.ssl.http.pemkey_filepath: node1_http.key
opendistro_security.ssl.http.pemkey_password: miJ2MVqKwEr8
opendistro_security.ssl.http.pemtrustedcas_filepath: root-ca.pem
opendistro_security.allow_unsafe_democertificates: true
opendistro_security.allow_default_init_securityindex: true
opendistro_security.nodes_dn:
- CN=node1.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com
- CN=node2.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com
- CN=node3.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com
opendistro_security.authcz.admin_dn:
- CN=kirk.example.com,OU=Ops,O=Example Com\, Inc.,DC=example,DC=com


#opendistro_security.audit.type: internal_elasticsearch
opendistro_security.enable_snapshot_restore_privilege: true
opendistro_security.check_snapshot_restore_write_privileges: true
opendistro_security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
opendistro_security.system_indices.enabled: true
opendistro_security.system_indices.indices: [".opendistro-alerting-config", ".opendistro-alerting-alert*", ".opendistro-anomaly-results*", ".opendistro-anomaly-detector*", ".opendistro-anomaly-checkpoints", ".opendistro-anomaly-detection-state", ".opendistro-reports-*", ".opendistro-notifications-*"]
######## End OpenDistro for Elasticsearch Security Demo Configuration ########
EOF
fi

if [[ "x$role" = "xmaster" ]];then
    master="true"
    data="false"
    nodename="master-$nodeip"
    tag="node.attr.tag: master"
elif [[ "x$role" = "xdata" ]]; then
    master="false"
    data="true"
    nodename="dn-$nodeip"
    tag="node.attr.tag: hot"
elif [[ "x$role" = "xcold" ]]; then
    master="false"
    data="true"
    nodename="cold-$nodeip"
    tag="node.attr.tag: cold"
elif [[ "x$role" = "xall" ]]; then
    master="true"
    data="true"
elif [[ "x$role" = "xclient" ]]; then
    master="false"
    data="false"
    nodename="client-$nodeip"
    tag="node.attr.tag: client"
fi

echo "cluster name is: $clustername"
echo "master  ip is:    $masterip"
echo "node  ip is:     $nodeip"
echo "nodename is:     $nodename"
echo "port is: $port"
echo "version: $version"

oldnodename=$nodename
oldport=$port
masternodename=`echo $masterip | sed  's/,/&master-/g;s/^/master-&/'`


if [[ $version == "5.4.0" ]];then
    tar zxf TencentKona-8.tar.gz && ln -s TencentKona-8 java || job_fail "tar java failed"
    if [ -L "/usr/bin/java" ];then
        rm -f /usr/bin/java
    fi
    ln -sf  /data/esenv/java/bin/java /usr/bin/java || job_fail "创建java软链接失败"
else
    tar zxf TencentKona-11.tar.gz && ln -s TencentKona-11 java || job_fail "tar java failed"
    if [ -L "/usr/bin/java" ];then
        rm -f /usr/bin/java
    fi
    ln -sf  /data/esenv/java/bin/java /usr/bin/java || job_fail "创建java软链接失败"
fi

# 获取系统内存，单位KB 65465872
#
sysmem=`cat /proc/meminfo |grep MemTotal|awk '{print $2}'`

if [ "$sysmem" -ge 64088224 ];then
    jvm="26g"
else
    jvm=`echo "$sysmem*.5/1024/1024"|bc`
    jvm="${jvm}g"
fi



echo "JVM setting to $jvm ..."
sed -i -e "s/__HEAPSIZE__/$jvm/g" $jvmconfig

if [[ $? -ne 0 ]];then
    echo "Config  jvm.options failed"
    exit $?
else
    echo "Config jvm.options success."
fi

cp $jvmconfig /data/esenv/es/config/jvm.options


echo "Now changing the $esconfig  ... "

sed -i  -e "/cluster.name/s/__CLUSTERNAME__/$clustername/"  -e \
    "/path.data/s#__ESDATA__#$ESDATA#" -e \
    "/node.name/s/__NODENAME__/$nodename/"  -e \
    "/discovery.zen.ping.unicast.hosts/s/__MASTERLIST__/$masterip/" -e \
    "/discovery.seed_hosts/s/__MASTERLIST__/$masterip/" -e \
    "/cluster.initial_master_nodes/s/__MASTERLIST__/$masternodename/" -e \
    "/discovery.zen.minimum_master_nodes/s/__MINMASTERS__/$minimasters/" -e \
    "/node.master/s/true/$master/" -e \
    "/node.data/s/true/$data/" -e \
    "s/__HTTPPORT__/$port/" -e \
    "s/__IP__/$nodeip/"  -e "/node.master/a\\$tag"  $esconfig

if [[ "x$minimasters" = "x1" ]];then
  sed -i -e '/cluster.initial_master_nodes/d' -e '/discovery.seed_hosts/a\discovery.type: single-node' $esconfig
fi

if [[ $? -ne 0 ]];then
    echo "Config  elasticsearch.yml failed"
    exit $?
else
    echo "Config elasticsearch.yml success."
fi

cp $esconfig /data/esenv/es/config/elasticsearch.yml

echo "Change grant for /data/esenv ..."
chown -R elastic:elastic /data/esenv


## supervisor
f1=supervisor.tar.gz
f2=pypy-5.9.0.tar.gz
d=$(date +%Y%m%d%H%M%S)

cd /data/esenv
if [ -e "supervisor" ];then
    mv supervisor supervisor."$d"
fi
tar zxf  $f1 && echo "解压$f1完成" || echo "解压$f1失败"
tar zxf $f2 && echo "解压$f2完成" || echo "解压$f2失败"

echo "建立软链接"

ln -s pypy-5.9.0 python
ln -s /data/esenv/supervisor/conf/supervisord.conf /etc/supervisord.conf
ln -s /data/esenv/supervisor/bin/supervisorctl /usr/local/bin/supervisorctl
ln -s /data/esenv/python/bin/supervisord  /usr/local/bin/supervisord


echo "更改权限"
chown -R $user:$user /data/esenv/pypy-5.9.0
chown -R $user:$user /data/esenv/supervisor

echo "安装crontab"
crontab  -l -u  $user >crontab.$user.bak
cp crontab.$user.bak crontab."$d"
sed -i '/check_supervisord.sh/d' crontab.$user.bak
echo '*/1 * * * *  /data/esenv/supervisor/check_supervisord.sh >> /data/esenv/supervisor/check_supervisord.err 2>&1' >>crontab.$user.bak
crontab -u $user crontab.$user.bak

echo "生成es supervisor.ini"
cat <<'EOF' > /data/esenv/supervisor/conf/elasticsearch.ini
[program:elasticsearch]
command=/data/esenv/es/bin/elasticsearch ; the program (relative uses PATH, can take args)
numprocs=1 ; number of processes copies to start (def 1)
autostart=true ; start at supervisord start (default: true)
startsecs=3 ; # of secs prog must stay up to be running (def. 1)
startretries=99 ; max # of serial start failures when starting (default 3)
autorestart=true ; when to restart if exited after running (def: unexpected)
exitcodes=0 ; 'expected' exit codes used with autorestart (default 0,2)
user=elastic ;
redirect_stderr=true ; redirect proc stderr to stdout (default false)
stdout_logfile=/data/eslog/es_startup.log ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=50MB ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10 ; # of stdout logfile backups (default 10)
EOF

su - elastic -c  "/usr/local/bin/supervisord -c /data/esenv/supervisor/conf/supervisord.conf" && echo "部署supervisor成功" || echo  "部署supervisor失败"


# Deploy cerebro
cd /data/esenv
tar zxf cerebro-${cerebroversion}.tar.gz
chown -R elastic:elastic cerebro-${cerebroversion}
ln -s cerebro-${cerebroversion} cerebro

cerebroTemplate='/data/esenv/cerebro/conf/application.conf.template'
cat <<'EOF' >$cerebroTemplate
# Secret will be used to sign session cookies, CSRF tokens and for other encryption utilities.
# It is highly recommended to change this value before running cerebro in production.
secret = "ki:s:[[@=Ag?QI`W2jMwkY:eqvrJ]JqoJyi2axj3ZvOv^/KavOT4ViJSv?6YY4[N"

# Application base path
basePath = "/es/cerebro/__CLUSTERNAME__/"
#basePath = "/"

# Defaults to RUNNING_PID at the root directory of the app.
# To avoid creating a PID file set this value to /dev/null
#pidfile.path = "/var/run/cerebro.pid"
pidfile.path=/dev/null

# Rest request history max size per user
rest.history.size = 50 // defaults to 50 if not specified

# Path of local database file
#data.path: "/var/lib/cerebro/cerebro.db"
data.path = "./cerebro.db"

play {
  # Cerebro port, by default it's 9000 (play's default)
  server.http.port = ${?CEREBRO_PORT}
}

es = {
  gzip = true
}

# Authentication
auth = {
  # either basic or ldap
  type: ${?AUTH_TYPE}
  settings {
    # LDAP
    url = ${?LDAP_URL}
    # OpenLDAP might be something like "ou=People,dc=domain,dc=com"
    base-dn = ${?LDAP_BASE_DN}
    # Usually method should  be "simple" otherwise, set it to the SASL mechanisms to try
    method = ${?LDAP_METHOD}
    # user-template executes a string.format() operation where
    # username is passed in first, followed by base-dn. Some examples
    #  - %s => leave user untouched
    #  - %s@domain.com => append "@domain.com" to username
    #  - uid=%s,%s => usual case of OpenLDAP
    user-template = ${?LDAP_USER_TEMPLATE}
    // User identifier that can perform searches
    bind-dn = ${?LDAP_BIND_DN}
    bind-pw = ${?LDAP_BIND_PWD}
    group-search {
      // If left unset parent's base-dn will be used
      base-dn = ${?LDAP_GROUP_BASE_DN}
      // Attribute that represent the user, for example uid or mail
      user-attr = ${?LDAP_USER_ATTR}
      // Define a separate template for user-attr
      // If left unset parent's user-template will be used
      user-attr-template = ${?LDAP_USER_ATTR_TEMPLATE}
      // Filter that tests membership of the group. If this property is empty then there is no group membership check
      // AD example => memberOf=CN=mygroup,ou=ouofthegroup,DC=domain,DC=com
      // OpenLDAP example => CN=mygroup
      group = ${?LDAP_GROUP}
    }

    # Basic auth
    username = ${?BASIC_AUTH_USER}
    password = ${?BASIC_AUTH_PWD}
  }
}

# A list of known hosts
hosts = [
  {
    host = "http://__IP__:__HTTPPORT__"
    name = "__CLUSTERNAME__"
    headers-whitelist = [ "x-proxy-user", "x-proxy-roles", "X-Forwarded-For" ]
  }
]
EOF

cp $cerebroTemplate /data/esenv/cerebro/conf/application.conf

sed -i -e "s/__CLUSTERNAME__/$clustername/g" -e \
          "s/__IP__/$nodeip/" -e  \
          "s/__HTTPPORT__/$port/" -e  \
          "s/__USERNAME__/$username/" -e \
          "s/__PASSWORD__/$password/" /data/esenv/cerebro/conf/application.conf



cat <<'EOF' >/data/esenv/supervisor/conf/cerebro.ini
[program:cerebro]
command=/data/esenv/cerebro/bin/cerebro -Dhttp.port=1234 ; the program (relative uses PATH, can take args)
directory=/data/esenv/cerebro ;
numprocs=1 ; number of processes copies to start (def 1)
autostart=true ; start at supervisord start (default: true)
startsecs=3 ; # of secs prog must stay up to be running (def. 1)
startretries=99 ; max # of serial start failures when starting (default 3)
autorestart=true ; when to restart if exited after running (def: unexpected)
exitcodes=0 ; 'expected' exit codes used with autorestart (default 0,2)
user=elastic ;
redirect_stderr=true ; redirect proc stderr to stdout (default false)
stdout_logfile=/data/eslog/cerebro.log ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=50MB ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10 ; # of stdout logfile backups (default 10)
EOF



# Deploy kibana
cd /data/esenv
tar zxf kibana-${version}.tar.gz
chown -R elastic:elastic kibana-${version}
ln -s kibana-${version} kibana

##
kibanaTemplate="/data/esenv/kibana/config/kibana.yml.template"
cat <<'EOF' >$kibanaTemplate
server.name: kibana
server.host: "0"
server.port: 5603
server.basePath: /es/kibana/__CLUSTERNAME__
server.rewriteBasePath: true
elasticsearch.hosts: http://__IP__:__HTTPPORT__
elasticsearch.ssl.verificationMode: none
elasticsearch.username: __USERNAME__
elasticsearch.password: __PASSWORD__
elasticsearch.requestHeadersWhitelist: ["securitytenant","Authorization"]

#opendistro_security.multitenancy.enabled: true
#opendistro_security.multitenancy.tenants.preferred: ["Private", "Global"]
#opendistro_security.readonly_mode.roles: ["kibana_read_only"]
EOF

cp $kibanaTemplate /data/esenv/kibana/config/kibana.yml

echo "changing kibana config"

sed -i -e "s/__CLUSTERNAME__/$clustername/g" -e \
          "s/__IP__/$nodeip/" -e  \
          "s/__HTTPPORT__/$port/" -e  \
          "s/__USERNAME__/$username/" -e \
          "s/__PASSWORD__/$password/" /data/esenv/kibana/config/kibana.yml


cat <<'EOF' > /data/esenv/supervisor/conf/kibana.ini
[program:kibana]
command=/data/esenv/kibana/bin/kibana ; the program (relative uses PATH, can take args)
numprocs=1 ; number of processes copies to start (def 1)
autostart=true ; start at supervisord start (default: true)
startsecs=3 ; # of secs prog must stay up to be running (def. 1)
startretries=99 ; max # of serial start failures when starting (default 3)
autorestart=true ; when to restart if exited after running (def: unexpected)
exitcodes=0 ; 'expected' exit codes used with autorestart (default 0,2)
user=elastic ;
redirect_stderr=true ; redirect proc stderr to stdout (default false)
stdout_logfile=/data/eslog/kibana.log ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=50MB ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10 ; # of stdout logfile backups (default 10)
EOF

supervisorctl update

exit 0
